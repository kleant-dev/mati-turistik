generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  Reservations  Reservations[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  email      String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Reservations {
  id                String    @id @default(cuid())
  userId            String
  startDate         DateTime @db.Date
  endDate           DateTime @db.Date
  regTime           DateTime @db.Timestamptz() @default(now())
  numberOfPersons   Int
  telephone         String
  additionalMessage String?
  totalPrice        Decimal 
  status            ReservationStatus @default(IN_PROGRESS)
  User              User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum ReservationStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ReservationSettings {
  id                     String @id @default(cuid())
  pricePerPerson         Decimal
  maxPersons             Int
  maxReservationDuration Int    
}

enum UserRole {
  USER
  ADMIN
}
